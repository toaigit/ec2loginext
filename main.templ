provider "aws" {
  region = "{{.Env.region}}"
}

data "template_file" "userdata" {
  template = "${file("${path.module}/userdata.sh")}"
  vars = {
    host_name = "{{.Env.host_name}}"
    local_domain_name = "{{.Env.local_domain_name}}"
  }
}

resource "aws_security_group" "elb_http" {
  name        = "extlogin-elb-sg-name}}"
  description = "Allow HTTP traffic to instances through Elastic Load Balancer"
  vpc_id = "{{.Env.VPC_ID}}"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
  }

}

resource "aws_elb" "web_elb" {
  name = "extlogin-web-elb"
  security_groups = [
    "${aws_security_group.elb_http.id}"
  ]
  subnets = [
    "{{.Env.subnet1}}",
    "{{.Env.subnet2}}",
    "{{.Env.subnet3}}",
    "{{.Env.subnet4}}"
  ]
  cross_zone_load_balancing   = true
  health_check {
    healthy_threshold = 2
    unhealthy_threshold = 2
    timeout = 3
    interval = 30
    target = "HTTP:80/"
  }
  listener {
    lb_port = 80
    lb_protocol = "http"
    instance_port = "80"
    instance_protocol = "http"
  }
  listener {
    instance_port      = 443
    instance_protocol  = "https"
    lb_port            = 443
    lb_protocol        = "https"
    ssl_certificate_id = "{{.Env.CERT_ARN}}"
  }
}

resource "aws_lb_cookie_stickiness_policy" "extlogin" {
  name                     = "extlogin-policy"
  load_balancer            = aws_elb.web_elb.id
  lb_port                  = 443
  cookie_expiration_period = 600
}

resource "aws_lb_ssl_negotiation_policy" "my-elb-ssl-policy" {
  name          = "my-elb-ssl-policy"
  load_balancer = aws_elb.web_elb.id
  lb_port       = 443

  attribute {
    name  = "Reference-Security-Policy"
    value = "ELBSecurityPolicy-TLS-1-2-2017-01"
  }
}

resource "aws_autoscaling_group" "ServerGroup" {
  name_prefix               = "{{.Env.asg_prefix}}"
  max_size                  = "{{.Env.max_size}}"
  min_size                  = "{{.Env.min_size}}"
  desired_capacity          = "{{.Env.asg_desired}}"
  health_check_grace_period = "{{.Env.health_check_grace_period}}"
  vpc_zone_identifier       = [{{.Env.subnets}}]

  health_check_type    = "EC2"
  load_balancers= [
    "${aws_elb.web_elb.id}"
  ]

  launch_configuration      = aws_launch_configuration.LaunchConfig.name
#  availability_zones        = [{{.Env.ALLZONES}}]
  tag {
    key = "ASGName"
    value = "{{.Env.host_name}}"
    propagate_at_launch = true    
  }
  tag {
    key = "Name"
    value = "{{.Env.host_name}}"
    propagate_at_launch = true    
  }
  tag {
    key = "Creator"
    value = "{{.Env.CREATOR}}"
    propagate_at_launch = true    
  }
  lifecycle {
    create_before_destroy = true
    }
}

resource "aws_launch_configuration" "LaunchConfig" {
  name_prefix                 = "{{.Env.lc_prefix}}"
  image_id                    = "{{.Env.buster_ami}}"
  instance_type               = "{{.Env.instance_type}}"
  key_name                    = "{{.Env.key_name}}"
  security_groups             = ["{{.Env.sgAll}}"]
  iam_instance_profile        = "{{.Env.iamrole}}"
  associate_public_ip_address = true

  root_block_device {
    volume_type           = "{{.Env.volume_type}}"
    volume_size           = "{{.Env.volume_size}}"
    delete_on_termination = "{{.Env.delete_on_termination}}"
  }
  lifecycle {
    create_before_destroy = true
  }
  user_data = data.template_file.userdata.rendered
}

output "ELB_IP" {
  value = "${aws_elb.web_elb.dns_name}"
}
